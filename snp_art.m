%% snp_art - a program for snp lab to run art in batch mode, using SPM.mat as input.  
%        Usage: snp_art (SPM_file, 
%                 use_diff_global (1,0), ==> 1-Yes, 0-No
%                 use_diff_motion (1,0), ==> 1-Yes, 0-No
%                 use_norms (1,0),  ==> 1-Combine all movement dimensions, 0-Not combine
%                 global_threshold,  ==> Threshold for outlier detection
%                                        based on global signal(actual value or std)
%                 motion_threshold, ==> Threshold                       
%                                       for outlier detection based on
%                                       motion estimate (mm)
%                 display_time)  ==> Number in seconds
%                                        
%                  e.g.
%                  snp_art('/ncf/snp/06/SPAA/CBS/r28102/MID_analysis_art/SP
%                  M.mat',0,1,0,4,3,20)
function snp_art(SPM_file, input_use_diff_global, input_use_diff_motion, input_use_norms, input_global_threshold, input_motion_threshold)
addpath('/ncf/snp/11/tools/art');
%%%%%%%%%%%% ART PARAMETERS (edit to desired values) %%%%%%%%%%%%
global_mean=1;              % global mean type (1: Standard 2: Every Voxel 3: User Mask 4: Auto)
motion_file_type=0;         % motion file type (0: SPM .txt file 1: FSL .par file 2:Siemens .txt file) hard code for now
global_threshold=input_global_threshold;         % threshold for outlier detection based on global signal
motion_threshold=input_motion_threshold;         % threshold for outlier detection based on motion estimates
use_diff_global=input_use_diff_global;
use_diff_motion=input_use_diff_motion;
use_norms=input_use_norms;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
STEPS=[1,1];
% Hong Yin 6-1-2010
% modified the input step to use the SPM.mat file locaiton without going
% through the GUI.
if STEPS(1),
    %files=spm_select(Inf,'SPM\.mat','Select SPM.mat files (one per subject)');
    %files=input('Input the SPM file with path: ','s');
    files=SPM_file;
    for n1=1:size(files,1),
        [filepath,filename,fileext]=fileparts(deblank(files(n1,:)));
        display(['Change to',filepath]);
        cd(filepath);
        cfgfile=fullfile(filepath,['art_config',num2str(n1,'%03d'),'.cfg']);
        fid=fopen(cfgfile,'wt');
        %[filepath,filename,fileext]=fileparts(deblank(files(n1,:)));
        save_filename=[filepath,'/',filename,'_stats_file'];
        display('writing cfg file and load SPM');
        load(deblank(files(n1,:)),'SPM');
        
        fprintf(fid,'# Automatic script generated by %s\n',mfilename);    
        fprintf(fid,'sessions: %d\n',length(SPM.Sess));
        fprintf(fid,'global_mean: %d\n',global_mean);
        fprintf(fid,'global_threshold: %f\n',global_threshold);
        fprintf(fid,'motion_threshold: %f\n',motion_threshold);
        fprintf(fid,'motion_file_type: %d\n',motion_file_type);
        fprintf(fid,'use_diff_global: %d\n',use_diff_global);
        fprintf(fid,'use_diff_motion: %d\n',use_diff_motion);
        fprintf(fid,'use_norms: %d\n', use_norms);
        fprintf(fid, 'comp_motion: 0\n');
        fprintf(fid,'motion_fname_from_image_fname: 1\n');
        fprintf(fid,'spm_file: %s\n',deblank(files(n1,:)));
        fprintf(fid,'end\n');
        
        for n2=1:length(SPM.Sess),
            temp=[SPM.xY.P(SPM.Sess(n2).row,:),repmat(' ',[length(SPM.Sess(n2).row),1])]';
            fprintf(fid,'session %d image %s\n',n2,temp(:)');
        end
        fprintf(fid,'end\n');
        fclose(fid);
    end
end

if STEPS(2),
    for n1=1:size(files,1),
        cfgfile=fullfile(pwd,['art_config',num2str(n1,'%03d'),'.cfg']);
        disp(['running subject ',num2str(n1),' using config file ',cfgfile]);
        art('sess_file',cfgfile,'stats_file',save_filename);
        
        % close the window after specified time
            close(gcf);
        
    end
end
return;
